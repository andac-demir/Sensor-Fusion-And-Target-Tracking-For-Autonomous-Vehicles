% Lousy implementation of data feed into Python. Python simulator requires
% data generated by Matlab autonomous driving toolbox. Python reads .mat 
% files with scipy which requires each element to be saved independently to
% a file. For the purposes of simulation each sensor is saved with a proper
% name.
clear all
close all

% Run the function if data is not provided.
% track_data = Str_Road_Designer();
load('ans.mat')

%% Load rear camera and save in appropriate format
list_time = [];
list_state = [];
list_noise = [];
list_obj = [];
idx_radar = 1;
for idx = 1:length(track_data)
        
        track = track_data(idx).ObjectDetections_Camera_r;
        if ~isempty(track)
            for idx_t = 1:length(track)
               obs = track{idx_t};
               list_time{idx_radar} = obs.Time;
               list_state{idx_radar} = obs.Measurement;
               list_noise{idx_radar} = obs.MeasurementNoise;
               list_obj{idx_radar} = obs.ObjectClassID;
               idx_radar = idx_radar + 1;
            end
        end
    
end

save cam_rear.mat list_time list_state list_noise list_obj

%% Load front camera and save in appropriate format
list_time = [];
list_state = [];
list_noise = [];
list_obj = [];
idx_radar = 1;
for idx = 1:length(track_data)
        
        track = track_data(idx).ObjectDetections_Camera_f;
        if ~isempty(track)
            for idx_t = 1:length(track)
               obs = track{idx_t};
               list_time{idx_radar} = obs.Time;
               list_state{idx_radar} = obs.Measurement;
               list_noise{idx_radar} = obs.MeasurementNoise;
               list_obj{idx_radar} = obs.ObjectClassID;
               idx_radar = idx_radar + 1;
            end
        end
    
end

save cam_front.mat list_time list_state list_noise list_obj

%% Load front radar and save in appropriate format
list_time = [];
list_state = [];
list_noise = [];
list_obj = [];
idx_radar = 1;
for idx = 1:length(track_data)
        
        track = track_data(idx).ObjectDetections_Radar_f;
        if ~isempty(track)
            for idx_t = 1:length(track)
               obs = track{idx_t};
               list_time{idx_radar} = obs.Time;
               list_state{idx_radar} = obs.Measurement;
               list_noise{idx_radar} = obs.MeasurementNoise;
               list_obj{idx_radar} = obs.ObjectClassID;
               idx_radar = idx_radar + 1;
            end
        end
    
end

save radar_front.mat list_time list_state list_noise list_obj

%% Load rear radar and save in appropriate format
list_time = [];
list_state = [];
list_noise = [];
list_obj = [];
idx_radar = 1;
for idx = 1:length(track_data)
        
        track = track_data(idx).ObjectDetections_Radar_r;
        if ~isempty(track)
            for idx_t = 1:length(track)
               obs = track{idx_t};
               list_time{idx_radar} = obs.Time;
               list_state{idx_radar} = obs.Measurement;
               list_noise{idx_radar} = obs.MeasurementNoise;
               list_obj{idx_radar} = obs.ObjectClassID;
               idx_radar = idx_radar + 1;
            end
        end
    
end

save radar_rear.mat list_time list_state list_noise list_obj