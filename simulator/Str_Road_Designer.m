function [allData, scenario, sensors] = Str_Road_Designer()
%Str_Road_Designer - Returns sensor detections
%    allData = Str_Road_Designer returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = Str_Road_Designer optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.5 and Automated Driving System Toolbox 1.3.
% Generated on: 19-Feb-2019 11:54:07

% Create the drivingScenario object and ego car
[scenario, egoCar] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {},'ObjectDetections_Camera_r', {},'ObjectDetections_Camera_f', {},'ObjectDetections_Radar_f', {},'ObjectDetections_Radar_r', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    objectdet_cam_r = {};
    objectdet_cam_f = {};
    objectdet_radar_f = {};
    objectdet_radar_r = {};
    
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        if sensorIndex == 1
            objectdet_cam_r = [objectdet_cam_r; objectDets(1:numObjects)];
        elseif sensorIndex == 2
            objectdet_cam_f = [objectdet_cam_f; objectDets(1:numObjects)];
        elseif sensorIndex == 3
            objectdet_radar_f = [objectdet_radar_f; objectDets(1:numObjects)];
        elseif sensorIndex == 4
            objectdet_radar_r = [objectdet_radar_r; objectDets(1:numObjects)];
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections},...
            'ObjectDetections_Camera_r', {objectdet_cam_r},...
            'ObjectDetections_Camera_f', {objectdet_cam_f},...
            'ObjectDetections_Radar_f', {objectdet_radar_f},...
            'ObjectDetections_Radar_r', {objectdet_radar_r}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{3} = radarDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [1 0], ...
    'ActorProfiles', profiles);
sensors{4} = radarDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'ActorProfiles', profiles);
numSensors = 4;

function [scenario, egoCar] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0 0 0;
    400 0 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [0 -1.8 0.01]);
waypoints = [0 -1.8 0.01;
    400 -1.8 0];
speed = 16.67;
trajectory(egoCar, waypoints, speed);

% Add the non-ego actors
leadCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [30 -1.8 0]);
waypoints = [30 -1.8 0;
    400 -1.8 0];
speed = 16.67;
trajectory(leadCar, waypoints, speed);

passingCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [300 1.8 0]);
waypoints = [300 1.8 0;
    100 1.8 0];
speed = 13.88;
trajectory(passingCar, waypoints, speed);

